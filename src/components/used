import React, { useRef } from "react";
import * as THREE from "three";
import { Reticle } from "../utils";
import { DemoUtils } from "../utils";
import { WebGLLayer } from "react-unity-webgl";

const StartButton = () => {
    // XR Globals
    let xrSession = null;
    let xrRefSpace = null;
    let xrViewerSpace = null;
    let xrHitTestSource = null;
    let xrButton = useRef(null);

    // Scene Globals
    let gl = null;
    let canvas = null;

    const checkSupportedState = () => {
        navigator.xr.isSessionSupported("immersive-ar").then((supported) => {
            if (supported) {
                xrButton.innerHTML = "Enter AR";
            } else {
                xrButton.innerHTML = "AR not found";
            }
        });
    };

    // const onNoXRDevice = () => {
    //     document.body.classList.add("unsupported");
    // };
    const initXR = () => {
        if (!window.isSecureContext) {
            let message = "WebXR unavailable due to insecure context";
            document.getElementById("warning-zone").innerText = message;
        }

        if (navigator.xr) {
            xrButton.addEventListener("click", onButtonClicked);
            navigator.xr.addEventListener("devicechange", checkSupportedState);
            checkSupportedState();
        }
    };

    const onButtonClicked = async () => {
        try {
            if (!xrSession) {
                await navigator.xr
                    .requestSession("immersive-ar", {
                        requiredFeatures: ["hit-test", "dom-overlay"],
                        domOverlay: {
                            root: document.body,
                        },
                    })
                    .then((onSessionStarted, onRequestSessionError));
            } else {
                xrSession.end();
            }
        } catch (err) {
            console.error(err);
        }
    };

    const onSessionStarted = async (session) => {
        xrButton.innerHTML = "Exit";
        xrSession = session;
        session.addEventListener("end", onSessionEnded);

        let canvas = document.createElement("canvas");
        let gl = canvas.getContext("webgl", {
            xrCompatible: true,
        });

        session.updateRenderState({ baseLayer: new WebGLLayer(session, gl) });

        setupThreeJs();

        await session.requestReferenceSpace("local").then((refSpace) => {
            xrRefSpace = refSpace;
            session.requestAnimationFrame(onXRFrame);
        });
        xrViewerSpace = await session.requestReferenceSpace("viewer");
        xrHitTestSource = await session.requestHitTestSource({
            space: xrViewerSpace,
        });
        session.addEventListener("select", onSelect);
    };

    const onRequestSessionError = function (ex) {
        alert("Failed to start immersive AR session.");
        console.error(ex.message);
    };

    const onSessionEnded = function () {
        xrSession = null;
        xrButton.innerHTML = "Enter AR";
        document.getElementById("session-info").innerHTML = "";
        gl = null;
    };

    const onSelect = function () {
        if (window.sunflower) {
            const clone = window.sunflower.clone();
            clone.position.copy(this.reticle.position);
            this.scene.add(clone);

            const shadowMesh = this.scene.children.find(
                (c) => c.name === "shadowMesh"
            );
            shadowMesh.position.y = clone.position.y;
        }
    };

    const onXRFrame = function (time, frame) {
        // Queue up the next draw request.
        let session = frame.session;
        session.requestAnimationFrame(onXRFrame);

        // Bind the graphics framebuffer to the baseLayer's framebuffer.
        const framebuffer = session.renderState.baseLayer.framebuffer;
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        this.renderer.setFramebuffer(framebuffer);

        // Retrieve the pose of the device.
        // XRFrame.getViewerPose can return null while the session attempts to establish tracking.
        let pose = frame.getViewerPose(xrRefSpace);
        if (pose) {
            // In mobile AR, we only have one view.
            const view = pose.views[0];

            const viewport = session.renderState.baseLayer.getViewport(view);
            this.renderer.setSize(viewport.width, viewport.height);

            // Use the view's transform matrix and projection matrix to configure the THREE.camera.
            this.camera.matrix.fromArray(view.transform.matrix);
            this.camera.projectionMatrix.fromArray(view.projectionMatrix);
            this.camera.updateMatrixWorld(true);

            // Conduct hit test.
            const hitTestResults = frame.getHitTestResults(xrHitTestSource);

            // If we have results, consider the environment stabilized.

            if (hitTestResults.length > 0) {
                const hitPose = hitTestResults[0].getPose(xrRefSpace);

                // Update the reticle position
                this.reticle.visible = true;
                this.reticle.position.set(
                    hitPose.transform.position.x,
                    hitPose.transform.position.y,
                    hitPose.transform.position.z
                );
                this.reticle.updateMatrixWorld(true);
            }

            // Render the scene with THREE.WebGLRenderer.
            this.renderer.render(this.scene, this.camera);
        }
    };

    /**
     * Initialize three.js specific rendering code, including a WebGLRenderer,
     * a demo scene, and a camera for viewing the 3D content.
     */
    const setupThreeJs = function () {
        // To help with working with 3D on the web, we'll use three.js.
        // Set up the WebGLRenderer, which handles rendering to our session's base layer.
        const renderer = new THREE.WebGLRenderer({
            alpha: true,
            preserveDrawingBuffer: true,
            canvas: canvas,
            context: gl,
        });
        renderer.autoClear = false;
        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;

        // Initialize our demo scene.
        const scene = DemoUtils.createLitScene();
        const reticle = new Reticle();
        scene.add(reticle);

        // We'll update the camera matrices directly from API, so
        // disable matrix auto updates so three.js doesn't attempt
        // to handle the matrices independently.
        let camera = new THREE.PerspectiveCamera();
        camera.matrixAutoUpdate = false;
    };
    initXR();

    return (
        <div id="session-info">
            <button
                ref={xrButton}
                className="btn"
                type="submit"
                onClick={onButtonClicked}
            ></button>
        </div>
    );
};

export default StartButton;
